#
# Copyright 2016-2017 The Reaktivity Project
#
# The Reaktivity Project licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

property newNetworkRouteRef  ${nuklei:newReferenceId()} # external

property networkConnect "nukleus://kafka/streams/source"
property networkConnectWindow 8192

property newMetadataRequestId ${kafka:newRequestId()}
property newRequestId ${kafka:newRequestId()}
property maximumWaitTime 500
property maximumBytes 65535
property maximumBytesTest0 8192

# Metadata stream
connect await ROUTED_SERVER
        ${networkConnect}
  option nukleus:route ${newNetworkRouteRef}
  option nukleus:transmission "duplex"
  option nukleus:byteorder "network"

connected

write 21        # Size
write 0x03s     # ApiKey int16 (Metadata)
write 0x05s     # ApiVersion int16
write ${newMetadataRequestId} # CorrelationId int32
write -1s       # ClientId string (null)
write 1         # [TopicName] array length
  write 4s "test"
write [0x00]    # allow_auto_topic_creation (boolean)

read 107        # Size int32
read ${newMetadataRequestId} # CorrelationId int32
read [0..4]     # throttle_time_ms int32
read 1          # brokers array length
  read 1        # broker id
  read 7s "broker1"
  read 9093     # port int32
  read -1s      # rack string (null)
read 9s "cluster 1"
read 1          # controller broker id
read 1          # topic array length
  read 0s       # error code
  read 4s "test"
  read [0x00]   # is_internal boolean
  read 2        # partition array length
    read 0s     # error code
    read 0      # partition
    read 1      # leader
    read 0      # replicas array (empty)
    read -1     # isr array (null)
    read 0      # offline replicas array (empty)

    read 0s     # error code
    read 1      # partition
    read 1      # leader
    read 0      # replicas array (empty)
    read -1     # isr array (null)
    read 0      # offline replicas array (empty)
read notify METADATA_RECEIVED

write 41        # Size int32
write 32s       # ApiKey int16 (DescribeConfigs)
write 0s        # ApiVersion int16
write ${newMetadataRequestId} # CorrelationId int32
write -1s       # ClientId string (null)
write 1         # resources count
write [0x02]    # resource type (topic is 2, from org/apache/kafka/common/resource/ResourceType.java)
write 4s "test" # topic name
write 1         # config names count
write 14s "cleanup.policy"  # config name

read 54         # Size int32
read ${newMetadataRequestId} # CorrelationId int32
read [0..4]     # throttle_time_ms int32
read 1          # resources count
read 0s         # error code
read -1s        # error message
read [0x02]     # resource type (topic)
read 4s "test"  # topic name
read 1          # config entries count
read 14s "cleanup.policy"   # config name
read 6s "delete"            # config value
read [0x00]     # read_only boolean
read [0x01]     # is_default boolean
read [0x00]     # is_sensitive boolean

# Fetch stream
connect await METADATA_RECEIVED
        ${networkConnect}
  option nukleus:route ${newNetworkRouteRef}
  option nukleus:transmission "duplex"
  option nukleus:byteorder "network"

write nukleus:begin.ext ${tcp:beginExtRemoteHost("broker1", 9093)}

connected

write 89        # Size
write 1s        # API key (fetch)
write 5s        # API version
write ${newRequestId}
write -1s       # client id
write -1 
write ${maximumWaitTime}
write 1
write 256
write [0x00]
write 1
write 0x04s "test"
write 2         # Number of partitions
write 0         # Partition
write 0x00L
write -1L
write 256       # max partition bytes
write 1         # Partition
write 0L
write -1L
write 256       # max partition bytes

read 252        # Size
read ${newRequestId}
read [0..4]
read 1
read 0x04s "test"
read 2          # Number of partition responses
    read 0      # Partition
    read 0x00s
    read 0x01L  # high_watermark
    read -1L    # last_stable_offset
    read 0L     # log_start_offset
    read -1     # aborted_transactions (null)
    read 77     # Length of the record batch
                # Start of RecordBatch
    read 0L     # First offset 
    read 65     # Length
    read 0      # Partition leader epoque
    read [0x02] # Magic
    read 0x4e8723aa         # CRC32
    read 0s     # attributes
    read 0      # last offset delta
    read (long:timestamp)   # first timestamp
    read ${timestamp}       # maximum timestamp
    read -1L    # producer ID
    read -1s    # producer epoque
    read -1     # first sequence
    read 1      # Number of records
    read ${kafka:varint(15)} # Record length
    read [0x00] # attributes
    read ${kafka:varint(0)}  # timestamp delta
    read ${kafka:varint(0)}  # offset delta
    read ${kafka:varint(-1)} # key length
    read ${kafka:varint(9)}  # value length
    read "Hello one"         # value
    read ${kafka:varint(0)}  # headers array length
  
    read 1      # Partition
    read 0s
    read 1L  # high_watermark
    read -1L    # last_stable_offset
    read 0L     # log_start_offset
    read -1     # aborted_transactions (null)
    read 77     # Length of the record batch
                # Start of RecordBatch
    read 0L     # First offset 
    read 65     # Length
    read 0      # Partition leader epoque
    read [0x02] # Magic
    read 0x4e8723aa          # CRC32
    read 0s     # attributes
    read 0      # last offset delta
    read (long:timestamp)    # first timestamp
    read ${timestamp}        # maximum timestamp
    read -1L    # producer ID
    read -1s    # producer epoque
    read -1     # first sequence
    read 1      # Number of records
    read ${kafka:varint(15)} # Record length
    read [0x00] # attributes
    read ${kafka:varint(0)}  # timestamp delta
    read ${kafka:varint(0)}  # offset delta
    read ${kafka:varint(-1)} # key length
    read ${kafka:varint(9)}  # value length
    read "Hello two"         # value
    read ${kafka:varint(0)}  # headers array length
